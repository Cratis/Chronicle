<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cratis.Extensions.MongoDB</name>
    </assembly>
    <members>
        <member name="T:Cratis.Extensions.MongoDB.BootProcedure">
            <summary>
            Represents a <see cref="T:Cratis.Boot.IPerformBootProcedure"/> for setting up defaults and bindings for MongoDB
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.BootProcedure.#ctor(Cratis.Extensions.MongoDB.MongoDBDefaults)">
            <summary>
            Initializes a new instance of the <see cref="T:Cratis.Extensions.MongoDB.BootProcedure"/> class.
            </summary>
            <param name="defaults"></param>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.BootProcedure.Perform">
            <inheritdoc/>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.ConceptSerializationProvider">
            <summary>
            Represents a <see cref="T:MongoDB.Bson.Serialization.IBsonSerializationProvider"/> for concepts.
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializationProvider.CreateConceptSerializer``1">
            <summary>
            Creates an instance of a serializer of the concept of the given type param T.
            </summary>
            <typeparam name="T">The Concept type.</typeparam>
            <returns><see cref="T:Cratis.Extensions.MongoDB.ConceptSerializer`1"/> for the specific type.</returns>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializationProvider.GetSerializer(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.ConceptSerializer`1">
            <summary>
            Represents a <see cref="T:MongoDB.Bson.Serialization.IBsonSerializer`1"/> for <see cref="T:Cratis.Concepts.ConceptAs`1"/> types.
            </summary>
            <typeparam name="T">Type of concept.</typeparam>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cratis.Extensions.MongoDB.ConceptSerializer`1"/> class.
            </summary>
        </member>
        <member name="P:Cratis.Extensions.MongoDB.ConceptSerializer`1.ValueType">
            <inheritdoc/>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializer`1.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializer`1.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializer`1.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ConceptSerializer`1.MongoDB#Bson#Serialization#IBsonSerializer#Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.ConventionPacks">
            <summary>
            Holds well known names for convention packs.
            </summary>
        </member>
        <member name="F:Cratis.Extensions.MongoDB.ConventionPacks.CamelCase">
            <summary>
            Gets the camel case convention pack name.
            </summary>
        </member>
        <member name="F:Cratis.Extensions.MongoDB.ConventionPacks.IgnoreExtraElements">
            <summary>
            Gets the ignore extra elements convention pack name.
            </summary>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.DateTimeOffsetSupportingBsonDateTimeSerializer">
            <summary>
            Represents a serializer for handling serialization of <see cref="T:System.DateTimeOffset"/> to and from MongoDB.
            </summary>
            <remarks>
            Based on this: https://www.codeproject.com/Tips/1268086/MongoDB-Csharp-Serializer-for-DateTimeOffset-to-Bs
            </remarks>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.FailedConceptSerialization">
            <summary>
            Exception that gets thrown when the <see cref="T:Cratis.Extensions.MongoDB.ConceptSerializer`1"/> failed serializing a concept.
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.FailedConceptSerialization.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cratis.Extensions.MongoDB.FailedConceptSerialization"/> class.
            </summary>
            <param name="msg">Message to display.</param>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.IBsonClassMapFor`1">
            <summary>
            Defines a map for mapping a type to bson for MongoDB.
            </summary>
            <typeparam name="T">Type the class map is for.</typeparam>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.IBsonClassMapFor`1.Configure(MongoDB.Bson.Serialization.BsonClassMap{`0})">
            <summary>
            Configure the given class map.
            </summary>
            <param name="classMap"></param>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.ICanFilterMongoDBConventionPacksForType">
            <summary>
            Defines a system that can tell whether or not a specific <see cref="T:System.Type"/> should be affected by a <see cref="T:MongoDB.Bson.Serialization.Conventions.IConventionPack"/>.
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.ICanFilterMongoDBConventionPacksForType.ShouldInclude(System.String,MongoDB.Bson.Serialization.Conventions.IConventionPack,System.Type)">
            <summary>
            Returns true if <see cref="T:System.Type"/> is affected, false if not.
            </summary>
            <param name="conventionPackName">Name of the <see cref="T:MongoDB.Bson.Serialization.Conventions.IConventionPack"/>.</param>
            <param name="conventionPack">The <see cref="T:MongoDB.Bson.Serialization.Conventions.IConventionPack"/>.</param>
            <param name="type"><see cref="T:System.Type"/> to consider.</param>
            <returns>True if affected, false if not.</returns>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.IMongoDBClientFactory">
            <summary>
            Defines a factory that is capable of creating <see cref="T:MongoDB.Driver.IMongoClient"/> instances.
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.IMongoDBClientFactory.Create(MongoDB.Driver.MongoClientSettings)">
            <summary>
            Create a new <see cref="T:MongoDB.Driver.IMongoClient"/> from <see cref="T:MongoDB.Driver.MongoClientSettings"/>.
            </summary>
            <param name="settings"><see cref="T:MongoDB.Driver.MongoClientSettings"/> to use.</param>
            <returns>A new <see cref="T:MongoDB.Driver.IMongoClient"/>.</returns>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.IMongoDBClientFactory.Create(MongoDB.Driver.MongoUrl)">
            <summary>
            Create a new <see cref="T:MongoDB.Driver.IMongoClient"/> from <see cref="T:MongoDB.Driver.MongoUrl"/>.
            </summary>
            <param name="url"><see cref="T:MongoDB.Driver.MongoUrl"/> to use.</param>
            <returns>A new <see cref="T:MongoDB.Driver.IMongoClient"/>.</returns>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.IMongoDBClientFactory.Create(System.String)">
            <summary>
            Create a new <see cref="T:MongoDB.Driver.IMongoClient"/> from a connection string.
            </summary>
            <param name="connectionString">Connection string to use.</param>
            <returns>A new <see cref="T:MongoDB.Driver.IMongoClient"/>.</returns>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.MongoDBClientFactory">
            <summary>
            Represents an implementation of <see cref="T:Cratis.Extensions.MongoDB.IMongoDBClientFactory"/>.
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.MongoDBClientFactory.Create(MongoDB.Driver.MongoClientSettings)">
            <inheritdoc/>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.MongoDBClientFactory.Create(MongoDB.Driver.MongoUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.MongoDBClientFactory.Create(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Cratis.Extensions.MongoDB.MongoDBDefaults">
            <summary>
            Represents the setup of MongoDB defaults.
            </summary>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.MongoDBDefaults.#ctor(Cratis.Types.IInstancesOf{Cratis.Extensions.MongoDB.ICanFilterMongoDBConventionPacksForType},Cratis.Types.ITypes,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Cratis.Extensions.MongoDB.MongoDBDefaults"/> class.
            </summary>
            <param name="conventionPackFilters"><see cref="T:Cratis.Types.IInstancesOf`1"/> <see cref="T:Cratis.Extensions.MongoDB.ICanFilterMongoDBConventionPacksForType"/>.</param>
            <param name="types"><see cref="T:Cratis.Types.ITypes"/> for general type discovery.</param>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/> for providing instances of types.</param>
        </member>
        <member name="M:Cratis.Extensions.MongoDB.MongoDBDefaults.Initialize">
            <summary>
            Initialize the defaults.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.DatabaseExtensions">
            <summary>
            Convenience extension methods for <see cref="T:MongoDB.Driver.IMongoDatabase"/>.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.DatabaseExtensions.GetCollection``1(MongoDB.Driver.IMongoDatabase,MongoDB.Driver.MongoCollectionSettings)">
            <summary>
            Get a collection - with name of collection as convention (camelCase of typename).
            </summary>
            <param name="database"><see cref="T:MongoDB.Driver.IMongoDatabase"/> to extend.</param>
            <param name="settings">Optional <see cref="T:MongoDB.Driver.MongoCollectionSettings"/>.</param>
            <typeparam name="T">Type of collection to get.</typeparam>
            <returns>The collection for your type.</returns>
        </member>
    </members>
</doc>
