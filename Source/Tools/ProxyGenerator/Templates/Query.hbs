/*---------------------------------------------------------------------------------------------
 *  **DO NOT EDIT** - This file is an automatically generated file.
 *--------------------------------------------------------------------------------------------*/

import { QueryFor, QueryResultWithState, useQuery, PerformQuery } from '@aksio/applications/queries';
{{#Imports}}
import { {{Type}} } from '{{Module}}';
{{/Imports}}
import Handlebars from 'handlebars';

const routeTemplate = Handlebars.compile('{{{Route}}}');

{{#if Arguments.[0]}}
export interface {{Name}}Arguments {
    {{#Arguments}}
    {{#if IsOptional}}
    {{camelcase Name}}?: {{Type}};
    {{else}}
    {{camelcase Name}}: {{Type}};
    {{/if}}
    {{/Arguments}}
}
{{#if IsEnumerable}}
export class {{Name}} extends QueryFor<{{Model}}[], {{Name}}Arguments> {
{{else}}
export class {{Name}} extends QueryFor<{{Model}}, {{Name}}Arguments> {
{{/if}}
{{else}}
{{#if IsEnumerable}}
export class {{Name}} extends QueryFor<{{Model}}[]> {
{{else}}
export class {{Name}} extends QueryFor<{{Model}}> {
{{/if}}
{{/if}}
    readonly route: string = '{{{Route}}}';
    readonly routeTemplate: Handlebars.TemplateDelegate = routeTemplate;
{{#if IsEnumerable}}
    readonly defaultValue: {{Model}}[] = [];
{{else}}
    readonly defaultValue: {{Model}} = {} as any;
{{/if}}

    constructor() {
        super({{Constructor}}, {{lowercase IsEnumerable}});
    }

    get requestArguments(): string[] {
        return [
            {{#Arguments}}
            '{{camelcase Name}}',
            {{/Arguments}}
        ];
    }

{{#if Arguments.[0]}}
{{#if IsEnumerable}}
    static use(args?: {{Name}}Arguments): [QueryResultWithState<{{Model}}[]>, PerformQuery<{{Name}}Arguments>] {
        return useQuery<{{Model}}[], {{Name}}, {{Name}}Arguments>({{Name}}, args);
    }
{{else}}
    static use(args?: {{Name}}Arguments): [QueryResultWithState<{{Model}}>, PerformQuery<{{Name}}Arguments>] {
        return useQuery<{{Model}}, {{Name}}, {{Name}}Arguments>({{Name}}, args);
    }
{{/if}}
{{else}}
{{#if IsEnumerable}}
    static use(): [QueryResultWithState<{{Model}}[]>, PerformQuery] {
        return useQuery<{{Model}}[], {{Name}}>({{Name}});
    }
{{else}}
    static use(): [QueryResultWithState<{{Model}}>, PerformQuery] {
        return useQuery<{{Model}}, {{Name}}>({{Name}});
    }
{{/if}}
{{/if}}
}
