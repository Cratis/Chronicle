{
  "openapi": "3.0.1",
  "info": {
    "title": "Aksio.Cratis.Kernel.Server",
    "version": "1.0"
  },
  "paths": {
    "/.cratis/observers/{observerId}": {
      "post": {
        "tags": [
          "ClientObservers"
        ],
        "summary": "Action that is called for events to be handled.",
        "parameters": [
          {
            "name": "observerId",
            "in": "path",
            "description": "The Aksio.Cratis.Observation.ObserverId of the observer it is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObserverId"
            }
          }
        ],
        "requestBody": {
          "description": "The Aksio.Cratis.Events.AppendedEvent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendedEvent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendedEvent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppendedEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/clients/{microserviceId}/ping/{connectionId}": {
      "post": {
        "tags": [
          "ConnectedClients"
        ],
        "summary": "A ping endpoint for clients to see if Kernel is available.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "The Aksio.Cratis.Execution.MicroserviceId that is connecting.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "The unique identifier of the connection that is pinging.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConnectionId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/clients/{microserviceId}/connect/{connectionId}": {
      "post": {
        "tags": [
          "ConnectedClients"
        ],
        "summary": "Accepts client connections over Web Sockets.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "The Aksio.Cratis.Execution.MicroserviceId that is connecting.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "The unique identifier of the connection.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConnectionId"
            }
          }
        ],
        "requestBody": {
          "description": "Aksio.Cratis.Clients.ClientInformation to connect with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientInformation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientInformation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ClientInformation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/{tenantId}/sequence/{eventSequenceId}": {
      "post": {
        "tags": [
          "EventSequence"
        ],
        "summary": "Appends an event to the event log.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "The microservice to append for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "eventSequenceId",
            "in": "path",
            "description": "The event sequence to append to.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventSequenceId"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant to append to.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          }
        ],
        "requestBody": {
          "description": "The payload with the details about the event to append.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendEvent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendEvent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppendEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "EventSequence"
        ],
        "summary": "Get events for a specific event sequence in a microservice for a specific tenant.",
        "parameters": [
          {
            "name": "eventSequenceId",
            "in": "path",
            "description": "Event sequence to get for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventSequenceId"
            }
          },
          {
            "name": "microserviceId",
            "in": "query",
            "description": "Microservice to get for.",
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant to get for.",
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          },
          {
            "name": "microserviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppendedEventWithJsonAsContent"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppendedEventWithJsonAsContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppendedEventWithJsonAsContent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/{tenantId}/sequence/{eventSequenceId}/histogram": {
      "get": {
        "tags": [
          "EventSequence"
        ],
        "summary": "Get a histogram of a specific event sequence. PS: Not implemented yet.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventSequenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHistogramEntry"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHistogramEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHistogramEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/sequences": {
      "get": {
        "tags": [
          "EventSequences"
        ],
        "summary": "Gets all event sequences.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSequenceInformation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSequenceInformation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSequenceInformation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/types": {
      "post": {
        "tags": [
          "EventTypes"
        ],
        "summary": "Register schemas.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId to register for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          }
        ],
        "requestBody": {
          "description": "The payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterEventTypes"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterEventTypes"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterEventTypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "EventTypes"
        ],
        "summary": "Gets all event types.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "The Aksio.Cratis.Execution.MicroserviceId to get event types for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypeInformation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypeInformation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypeInformation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/types/schemas/{eventTypeId}": {
      "get": {
        "tags": [
          "EventTypes"
        ],
        "summary": "Gets generation schema for type.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "query",
            "description": "The Aksio.Cratis.Execution.MicroserviceId to get event type for.",
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "eventTypeId",
            "in": "path",
            "description": "Type to get for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventTypeId"
            }
          },
          {
            "name": "microserviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      }
    },
    "/api/compliance/microservices": {
      "post": {
        "tags": [
          "Microservices"
        ],
        "summary": "Add a microservice.",
        "requestBody": {
          "description": "M:Aksio.Cratis.Kernel.Domain.Compliance.Microservices.Microservices.AddMicroservice(Aksio.Cratis.Kernel.Domain.Compliance.Microservices.AddMicroservice) payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMicroservice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMicroservice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddMicroservice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/configuration/microservices": {
      "get": {
        "tags": [
          "Microservices"
        ],
        "summary": "Returns all the tenants configured in the kernel.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Microservice"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Microservice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Microservice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/configuration/microservices/{microserviceId}/storage": {
      "get": {
        "tags": [
          "Microservices"
        ],
        "summary": "Get storage configuration for a specific microservice.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId for the microservice.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StorageForMicroservice"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageForMicroservice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageForMicroservice"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/observers/register/{connectionId}": {
      "post": {
        "tags": [
          "Observers"
        ],
        "summary": "Register client observers for a specific microservice and unique connection.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId to register for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Aksio.Cratis.Clients.ConnectionId to register with.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConnectionId"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of Aksio.Cratis.Observation.ClientObserverRegistration.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClientObserverRegistration"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClientObserverRegistration"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClientObserverRegistration"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/observers/{observerId}/rewind": {
      "post": {
        "tags": [
          "Observers"
        ],
        "summary": "Rewind a specific observer for a microservice and tenant.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId the observer is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.TenantId the observer is for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          },
          {
            "name": "observerId",
            "in": "path",
            "description": "Aksio.Cratis.Observation.ObserverId to rewind.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObserverId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/{tenantId}/observers": {
      "get": {
        "tags": [
          "Observers"
        ],
        "summary": "Get and observe all observers.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId the observers are for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.TenantId the observers are for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ObserverState"
                    }
                  },
                  "description": "Represents an implementation of Aksio.Cratis.Applications.Queries.IClientObservable."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ObserverState"
                    }
                  },
                  "description": "Represents an implementation of Aksio.Cratis.Applications.Queries.IClientObservable."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ObserverState"
                    }
                  },
                  "description": "Represents an implementation of Aksio.Cratis.Applications.Queries.IClientObservable."
                }
              }
            }
          }
        }
      }
    },
    "/api/compliance/gdpr/pii": {
      "post": {
        "tags": [
          "PII"
        ],
        "summary": "Create and register a key.",
        "requestBody": {
          "description": "M:Aksio.Cratis.Kernel.Domain.Compliance.GDPR.PII.CreateAndRegisterKeyFor(Aksio.Cratis.Kernel.Domain.Compliance.GDPR.CreateAndRegisterKeyFor) payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAndRegisterKeyFor"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAndRegisterKeyFor"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAndRegisterKeyFor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/compliance/gdpr/pii/delete": {
      "post": {
        "tags": [
          "PII"
        ],
        "summary": "Delete PII for a person.",
        "requestBody": {
          "description": "M:Aksio.Cratis.Kernel.Domain.Compliance.GDPR.PII.DeletePIIForPerson(Aksio.Cratis.Kernel.Domain.Compliance.GDPR.DeletePIIForPerson) payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePIIForPerson"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePIIForPerson"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePIIForPerson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/compliance/gdpr/people": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get all people.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Person"
                    }
                  },
                  "description": "Represents an implementation of Aksio.Cratis.Applications.Queries.IClientObservable."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Person"
                    }
                  },
                  "description": "Represents an implementation of Aksio.Cratis.Applications.Queries.IClientObservable."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Person"
                    }
                  },
                  "description": "Represents an implementation of Aksio.Cratis.Applications.Queries.IClientObservable."
                }
              }
            }
          }
        }
      }
    },
    "/api/compliance/gdpr/people/search": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Search for people by an arbitrary string.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "String to search for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/projections": {
      "post": {
        "tags": [
          "Projections"
        ],
        "summary": "Register projections with pipelines.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId to register for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          }
        ],
        "requestBody": {
          "description": "The registrations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterProjections"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterProjections"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterProjections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Projections"
        ],
        "summary": "Gets all projections.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "The Aksio.Cratis.Execution.MicroserviceId to get projections for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Projection"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Projection"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Projection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/projections/immediate/{tenantId}": {
      "post": {
        "tags": [
          "Projections"
        ],
        "summary": "Perform an immediate projection.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.MicroserviceId to perform for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.TenantId to perform for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          }
        ],
        "requestBody": {
          "description": "The details about the Aksio.Cratis.Kernel.Domain.Projections.ImmediateProjection.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImmediateProjection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ImmediateProjection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ImmediateProjection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImmediateProjectionResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImmediateProjectionResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImmediateProjectionResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/store/{microserviceId}/projections/{projectionId}/collections": {
      "get": {
        "tags": [
          "Projections"
        ],
        "summary": "Get all collections for projection.",
        "parameters": [
          {
            "name": "microserviceId",
            "in": "query",
            "description": "The Aksio.Cratis.Execution.MicroserviceId to get projection collections for.",
            "schema": {
              "$ref": "#/components/schemas/MicroserviceId"
            }
          },
          {
            "name": "projectionId",
            "in": "path",
            "description": "Id of projection to get for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProjectionId"
            }
          },
          {
            "name": "microserviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectionCollection"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectionCollection"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectionCollection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/configuration/tenants/{tenantId}": {
      "post": {
        "tags": [
          "TenantConfiguration"
        ],
        "summary": "Set a key/value pair configuration for a specific tenant.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.TenantId for the tenant to set for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          }
        ],
        "requestBody": {
          "description": "The key value pair to set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringStringKeyValuePair"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StringStringKeyValuePair"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StringStringKeyValuePair"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "TenantConfiguration"
        ],
        "summary": "Returns all the configuration key/value pairs associated with a specific tenant.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Aksio.Cratis.Execution.TenantId for the tenant to get for.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TenantId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/configuration/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get all the tenants.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantInfo"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddMicroservice": {
        "type": "object",
        "properties": {
          "microserviceId": {
            "$ref": "#/components/schemas/MicroserviceId"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Address": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AppendEvent": {
        "type": "object",
        "properties": {
          "eventSourceId": {
            "$ref": "#/components/schemas/EventSourceId"
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "content": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonNode"
            },
            "description": "The content of the event represented as System.Text.Json.Nodes.JsonObject.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the payload for appending an event."
      },
      "AppendedEvent": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EventMetadata"
          },
          "context": {
            "$ref": "#/components/schemas/EventContext"
          },
          "content": {
            "type": "object",
            "additionalProperties": { },
            "description": "The content in the form of an System.Dynamic.ExpandoObject.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an event that has been appended to an event log."
      },
      "AppendedEventWithJsonAsContent": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EventMetadata"
          },
          "context": {
            "$ref": "#/components/schemas/EventContext"
          },
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "additionalProperties": false,
        "description": "Represents an event that has been appended to an event log with the content as JSON."
      },
      "CausationId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an identifier for correlation."
      },
      "CausedBy": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Represents an identifier of an identity that was the root of a cause."
      },
      "City": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ClientInformation": {
        "type": "object",
        "properties": {
          "clientVersion": {
            "type": "string",
            "description": "The version of the client.",
            "nullable": true
          },
          "advertisedUri": {
            "type": "string",
            "description": "The URI that the client is advertised with.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the information sent to the Kernel when connecting."
      },
      "ClientObserverRegistration": {
        "type": "object",
        "properties": {
          "observerId": {
            "$ref": "#/components/schemas/ObserverId"
          },
          "name": {
            "$ref": "#/components/schemas/ObserverName"
          },
          "eventSequenceId": {
            "$ref": "#/components/schemas/EventSequenceId"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventType"
            },
            "description": "The type of events the observer is interested in.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the registration of a single client observer."
      },
      "ConnectionId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier for a connection for a client."
      },
      "CorrelationId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an identifier for correlation."
      },
      "Country": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CreateAndRegisterKeyFor": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/EncryptionKeyIdentifier"
          }
        },
        "additionalProperties": false,
        "description": "Encapsulation representing the creation and registration of a key for a specific identifier."
      },
      "DeletePIIForPerson": {
        "type": "object",
        "properties": {
          "personId": {
            "$ref": "#/components/schemas/PersonId"
          }
        },
        "additionalProperties": false
      },
      "EncryptionKeyIdentifier": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier of an encryption key."
      },
      "EventContext": {
        "type": "object",
        "properties": {
          "eventSourceId": {
            "$ref": "#/components/schemas/EventSourceId"
          },
          "sequenceNumber": {
            "$ref": "#/components/schemas/EventSequenceNumber"
          },
          "occurred": {
            "type": "string",
            "description": "<see cref=\"T:System.DateTimeOffset\">When</see> it occurred.",
            "format": "date-time"
          },
          "validFrom": {
            "type": "string",
            "description": "<see cref=\"T:System.DateTimeOffset\">When</see> event is considered valid from.",
            "format": "date-time"
          },
          "tenantId": {
            "$ref": "#/components/schemas/TenantId"
          },
          "correlationId": {
            "$ref": "#/components/schemas/CorrelationId"
          },
          "causationId": {
            "$ref": "#/components/schemas/CausationId"
          },
          "causedBy": {
            "$ref": "#/components/schemas/CausedBy"
          },
          "observationState": {
            "$ref": "#/components/schemas/EventObservationState"
          }
        },
        "additionalProperties": false,
        "description": "Represents the context in which an event exists - typically what it was appended with."
      },
      "EventGeneration": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents the generation of an Aksio.Cratis.Events.EventType."
      },
      "EventHistogramEntry": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EventMetadata": {
        "type": "object",
        "properties": {
          "sequenceNumber": {
            "$ref": "#/components/schemas/EventSequenceNumber"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata related to an event."
      },
      "EventObservationState": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "Represents the observation state for an event.",
        "format": "int32"
      },
      "EventSequenceId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          },
          "isEventLog": {
            "type": "boolean",
            "description": "Get whether or not this is the default log event sequence.",
            "readOnly": true
          },
          "isOutbox": {
            "type": "boolean",
            "description": "Get whether or not this is the default outbox event sequence.",
            "readOnly": true
          },
          "isInbox": {
            "type": "boolean",
            "description": "Get whether or not this is the default outbox event sequence.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier of an event sequence."
      },
      "EventSequenceInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventSequenceNumber": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents the sequence number within an event log for an event."
      },
      "EventSourceId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "isSpecified": {
            "type": "boolean",
            "description": "Check whether or not the Aksio.Cratis.Events.EventSourceId is specified.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier of an instance of an event source."
      },
      "EventType": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventTypeId"
          },
          "generation": {
            "$ref": "#/components/schemas/EventGeneration"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Whether or not the event type is considered a public event."
          }
        },
        "additionalProperties": false,
        "description": "Represents the type of an event."
      },
      "EventTypeId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Represents the concept of the unique identifier of a type of event."
      },
      "EventTypeInformation": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "generations": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EventTypeRegistration": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "friendlyName": {
            "type": "string",
            "description": "A friendly name.",
            "nullable": true
          },
          "schema": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "additionalProperties": false,
        "description": "Representation of an event type registration."
      },
      "FailedObserverPartition": {
        "type": "object",
        "properties": {
          "eventSourceId": {
            "$ref": "#/components/schemas/EventSourceId"
          },
          "sequenceNumber": {
            "$ref": "#/components/schemas/EventSequenceNumber"
          },
          "occurred": {
            "type": "string",
            "description": "Gets or sets the occurred time of the failure - if any.",
            "format": "date-time"
          },
          "lastAttempt": {
            "type": "string",
            "description": "Gets or sets the occurred time of the failure - if any.",
            "format": "date-time"
          },
          "attempts": {
            "type": "integer",
            "description": "Gets or sets the number of retry attempts it has had.",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the message from the failure - if any.",
            "nullable": true
          },
          "stackTrace": {
            "type": "string",
            "description": "Gets or sets the stack trace from the failure - if any.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the state used for failed observers."
      },
      "FirstName": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IPropertyPathSegment": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets the value that represents the segment.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a segment within a Aksio.Properties.PropertyPath."
      },
      "ImmediateProjection": {
        "type": "object",
        "properties": {
          "projectionId": {
            "$ref": "#/components/schemas/ProjectionId"
          },
          "eventSequenceId": {
            "$ref": "#/components/schemas/EventSequenceId"
          },
          "modelKey": {
            "$ref": "#/components/schemas/ModelKey"
          },
          "projection": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "additionalProperties": false,
        "description": "Represents the payload for performing an immediate projection."
      },
      "ImmediateProjectionResult": {
        "type": "object",
        "properties": {
          "model": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonNode"
            },
            "description": "The Json representation of the model.",
            "nullable": true
          },
          "affectedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyPath"
            },
            "description": "Collection of properties that was set.",
            "nullable": true
          },
          "projectedEventsCount": {
            "type": "integer",
            "description": "Number of events that caused projection.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents the result of an Aksio.Cratis.Kernel.Grains.Projections.IImmediateProjection."
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/JsonNodeOptions"
          },
          "parent": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "root": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "additionalProperties": false
      },
      "JsonNodeOptions": {
        "type": "object",
        "properties": {
          "propertyNameCaseInsensitive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LastName": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Microservice": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MicroserviceId"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MicroserviceId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Represents the concept of the microservice identifier."
      },
      "ModelKey": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "isSpecified": {
            "type": "boolean",
            "description": "Check whether or not the Aksio.Cratis.Projections.ModelKey is specified.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier of an instance of an event source."
      },
      "ModelName": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the friendly display name of a model."
      },
      "ObserverId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Concept that represents the unique identifier of an observer."
      },
      "ObserverName": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Concept that represents the name of an observer."
      },
      "ObserverRunningState": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "description": "Defines the status of an observer.",
        "format": "int32"
      },
      "ObserverState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier of the observer state.",
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventType"
            },
            "description": "Gets or sets the event types the observer is observing.",
            "nullable": true
          },
          "eventSequenceId": {
            "$ref": "#/components/schemas/EventSequenceId"
          },
          "observerId": {
            "$ref": "#/components/schemas/ObserverId"
          },
          "name": {
            "$ref": "#/components/schemas/ObserverName"
          },
          "type": {
            "$ref": "#/components/schemas/ObserverType"
          },
          "nextEventSequenceNumber": {
            "$ref": "#/components/schemas/EventSequenceNumber"
          },
          "lastHandled": {
            "$ref": "#/components/schemas/EventSequenceNumber"
          },
          "runningState": {
            "$ref": "#/components/schemas/ObserverRunningState"
          },
          "failedPartitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailedObserverPartition"
            },
            "description": "Gets or sets the failed partitions for the observer.",
            "nullable": true
          },
          "recoveringPartitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecoveringFailedObserverPartition"
            },
            "description": "Gets or sets the failed partitions for the observer.",
            "nullable": true
          },
          "hasFailedPartitions": {
            "type": "boolean",
            "description": "Gets whether or not there are any failed partitions.",
            "readOnly": true
          },
          "isRecoveringAnyPartition": {
            "type": "boolean",
            "description": "Gets whether or not there are any partitions being recovered.",
            "readOnly": true
          },
          "isDisconnected": {
            "type": "boolean",
            "description": "Gets whether or not the observer is in disconnected state. Meaning that there is no subscriber to it.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the state used for an observer."
      },
      "ObserverType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Defines the different types of observers.",
        "format": "int32"
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "socialSecurityNumber": {
            "$ref": "#/components/schemas/SocialSecurityNumber"
          },
          "firstName": {
            "$ref": "#/components/schemas/FirstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/LastName"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "postalCode": {
            "$ref": "#/components/schemas/PostalCode"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "personalInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalInformation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the concept of a unique identifier that identifies a person."
      },
      "PersonalInformation": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/PersonalInformationId"
          },
          "type": {
            "$ref": "#/components/schemas/PersonalInformationType"
          },
          "value": {
            "$ref": "#/components/schemas/PersonalInformationValue"
          }
        },
        "additionalProperties": false
      },
      "PersonalInformationId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PersonalInformationType": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonalInformationValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PostalCode": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Projection": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ProjectionId"
          },
          "name": {
            "$ref": "#/components/schemas/ProjectionName"
          },
          "modelName": {
            "$ref": "#/components/schemas/ModelName"
          }
        },
        "additionalProperties": false
      },
      "ProjectionCollection": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "documentCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProjectionId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier of a projection."
      },
      "ProjectionName": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the friendly display name of a projection."
      },
      "ProjectionRegistration": {
        "type": "object",
        "properties": {
          "projection": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "pipeline": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single projection registration."
      },
      "PropertyPath": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Gets the full path of the property.",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPropertyPathSegment"
            },
            "description": "Gets the segments the full property path consists of.",
            "nullable": true,
            "readOnly": true
          },
          "lastSegment": {
            "$ref": "#/components/schemas/IPropertyPathSegment"
          },
          "isRoot": {
            "type": "boolean",
            "description": "Gets whether or not this is the root path.",
            "readOnly": true
          },
          "isSet": {
            "type": "boolean",
            "description": "Gets whether or not the value is set.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an encapsulation of a property in the system - used for accessing properties on objects."
      },
      "RecoveringFailedObserverPartition": {
        "type": "object",
        "properties": {
          "eventSourceId": {
            "$ref": "#/components/schemas/EventSourceId"
          },
          "sequenceNumber": {
            "$ref": "#/components/schemas/EventSequenceNumber"
          },
          "startedRecoveryAt": {
            "type": "string",
            "description": "Gets or sets the occurred time of the failure - if any.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Represents the state used when recovering a failed observer partition."
      },
      "RegisterEventTypes": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeRegistration"
            },
            "description": "Collection of Aksio.Cratis.Kernel.Domain.Projections.EventTypeRegistration.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payload for registering multiple event types."
      },
      "RegisterProjections": {
        "type": "object",
        "properties": {
          "projections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectionRegistration"
            },
            "description": "Collection of Aksio.Cratis.Kernel.Domain.Projections.ProjectionRegistration.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the payload for registering projections."
      },
      "SocialSecurityNumber": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Gets the details for the PII.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StorageForMicroservice": {
        "type": "object",
        "properties": {
          "shared": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StorageType"
            },
            "description": "The shared database connection configurations for the microservice.",
            "nullable": true
          },
          "tenants": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/StorageType"
              },
              "description": "Represents the shared storage configuration for all <see cref=\"T:Aksio.Cratis.Configuration.StorageType\">storage types</see> within the system."
            },
            "description": "The tenant specific configuration.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents all storage configurations for all <see cref=\"T:Aksio.Cratis.Execution.MicroserviceId\">microservices</see> in the system."
      },
      "StorageType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of storage used.",
            "nullable": true
          },
          "connectionDetails": {
            "description": "Gets the provider type specific connection details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the configuration for a specific shared storage type."
      },
      "StringStringKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TenantId": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Gets or inits the underlying value for the instance.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Represents the unique identifier of a tenant in the system."
      },
      "TenantInfo": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TenantId"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
